package liquidity

import (
	"fmt"

	sdk "github.com/cosmos/cosmos-sdk/types"
)

// LiquidityPool represents a liquidity pool
type LiquidityPool struct {
	ID          uint64         `json:"id"`
	ReserveA     sdk.Coin       `json:"reserve_a"`
	ReserveB     sdk.Coin       `json:"reserve_b"`
	Liquidity    sdk.Coin       `json:"liquidity"`
	TotalShares  sdk.Dec        `json:"total_shares"`
}

// MsgAddLiquidity defines the AddLiquidity message
type MsgAddLiquidity struct {
	Sender    sdk.AccAddress `json:"sender"`
	PoolID    uint64         `json:"pool_id"`
	AssetA    sdk.Coin       `json:"asset_a"`
	AssetB    sdk.Coin       `json:"asset_b"`
	MinShares sdk.Dec        `json:"min_shares"`
}

// HandleMsgAddLiquidity handles the AddLiquidity message
func HandleMsgAddLiquidity(ctx sdk.Context, k Keeper, msg MsgAddLiquidity) sdk.Result {
	pool, found := k.GetLiquidityPool(ctx, msg.PoolID)
	if !found {
		return sdk.ErrUnknownRequest(fmt.Sprintf("liquidity pool with ID %d not found", msg.PoolID)).Result()
	}

	// Validate inputs
	if msg.MinShares.IsNegative() {
		return sdk.ErrInvalidCoins("min shares cannot be negative").Result()
	}

	// Perform liquidity addition
	shares, err := k.AddLiquidity(ctx, msg.PoolID, msg.Sender, msg.AssetA, msg.AssetB, msg.MinShares)
	if err != nil {
		return err.Result()
	}

	// Emit an event
	ctx.EventManager().EmitEvent(
		sdk.NewEvent(
			sdk.EventTypeMessage,
			sdk.NewAttribute(sdk.AttributeKeyModule, sdk.AttributeValueCategory),
			sdk.NewAttribute("action", "add_liquidity"),
			sdk.NewAttribute("pool_id", fmt.Sprintf("%d", msg.PoolID)),
			sdk.NewAttribute("shares_created", shares.String()),
		),
	)

	return sdk.Result{Code: sdk.CodeOK, Events: ctx.EventManager().ABCIEvents()}
}

// AddLiquidity handles the logic for adding liquidity to a pool
func (k Keeper) AddLiquidity(ctx sdk.Context, poolID uint64, sender sdk.AccAddress, assetA, assetB sdk.Coin, minShares sdk.Dec) (sdk.Dec, sdk.Error) {
	// Add liquidity handling logic here...
	// This function should calculate the shares to mint based on the provided assets,
	// update the pool state, and perform other necessary operations.

	// Return the number of shares minted
	return calculatedShares, nil
}
